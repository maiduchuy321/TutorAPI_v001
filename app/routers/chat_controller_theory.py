from fastapi import APIRouter, Depends, WebSocket, WebSocketDisconnect
from starlette.websockets import WebSocketState
from datetime import datetime
from typing import Dict, List, Any

from app.controllers.lesson_controller import LessonController
from app.models.chat_model import ChatHistory
from sqlalchemy.orm import Session
from app.models.models import get_db, User
from app.schemas.theory import MessageRequest, MessageResponse, ChatHistoryResponse
from app.controllers.llm_service import generate_response, process_stream
from app.routers.lesson import get_lesson
from app.utils.reflection import Reflection
from app.config import REFLECTION
from app.prompt.theory_prompt import TheoryPrompt
router = APIRouter(
    prefix="/guide",
    tags=["guide"],
    responses={401: {"description": "Unauthorized"}},
)

# L∆∞u tr·ªØ chat history cho m·ªói session
chat_sessions: Dict[str, ChatHistory] = {}


def get_chat_history(session_id: str) -> ChatHistory:
    """L·∫•y ho·∫∑c t·∫°o m·ªõi chat history cho session"""
    if session_id not in chat_sessions:
        chat_sessions[session_id] = ChatHistory()
        # Th√™m tin nh·∫Øn ch√†o m·ª´ng
        chat_sessions[session_id].add_message(
            "Assistant",
            "üíª Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi AI Gia s∆∞! üöÄ"
        )
    return chat_sessions[session_id]


def get_lesson_content_by_id(lesson_id, db):
    try:
        # S·ª≠ d·ª•ng tr·ª±c ti·∫øp LessonController
        lesson_controller = LessonController(db)
        lesson = lesson_controller.get_lesson(lesson_id)
        # print("Lesson", lesson)
        if lesson:
            # L∆∞u n·ªôi dung v√†o bi·∫øn
            content = lesson.content
            return content
        else:
            print("Kh√¥ng t√¨m th·∫•y b√†i gi·∫£ng")
            return None
    except Exception as e:
        print(f"L·ªói: {e}")
        print("Kh√¥ng t·ªìn t√†i b√†i gi·∫£ng trong CSDL")
        return None



@router.post("/{session_id}", response_model=MessageResponse)
async def handle_message(session_id: str, message: MessageRequest, db: Session = Depends(get_db)):
    """
    X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ LLM.

    Args:
        - **content**: N·ªôi dung tin nh·∫Øn
        - **lesson_id**: ID c·ªßa b√†i h·ªçc mu·ªën h·ªèi

    Returns:
        MessageResponse: Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c t·∫°o
    """
    start_time = datetime.now()

    # Ki·ªÉm tra lesson ID tr∆∞·ªõc
    context = get_lesson_content_by_id(message.lesson_id, db)
    if context is None:
        end_time = datetime.now()
        processing_time = (end_time - start_time).total_seconds()
        return MessageResponse(
            content="Kh√¥ng c√≥ ID b√†i gi·∫£ng trong CSDL",
            processing_time=processing_time,
            timestamp=end_time
        )

    # N·∫øu c√≥ lesson ID h·ª£p l·ªá, ti·∫øp t·ª•c x·ª≠ l√Ω
    query = message.content

    # L·∫•y chat history
    chat_history = get_chat_history(session_id)
    chat_history.add_message("user", query)
    print("Content ra ch∆∞a ", context)

    # T·∫°o prompt
    history = chat_history.get_history()
    latest_history = REFLECTION(history, last_items_considered=12)
    prompt = TheoryPrompt(context=context, history=latest_history).format()

    # G·ªçi LLM API
    stream = generate_response(prompt)

    # X·ª≠ l√Ω ph·∫£n h·ªìi
    response_text = ""
    response_text += process_stream(stream)

    # C·∫≠p nh·∫≠t l·ªãch s·ª≠
    chat_history.add_message("Assistant", response_text)

    # T√≠nh th·ªùi gian x·ª≠ l√Ω
    end_time = datetime.now()
    processing_time = (end_time - start_time).total_seconds()

    return MessageResponse(
        content=response_text,
        processing_time=processing_time,
        timestamp=end_time
    )

@router.get("/{session_id}/history", response_model=ChatHistoryResponse)
async def get_history(session_id: str):
    """L·∫•y l·ªãch s·ª≠ chat"""
    chat_history = get_chat_history(session_id)
    return ChatHistoryResponse(messages=chat_history.get_history())